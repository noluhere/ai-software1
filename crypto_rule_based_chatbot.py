# -*- coding: utf-8 -*-
"""Crypto Rule-based Chatbot

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dR2FJWMtbTtYEEmVXXzF128D3NCaB6cd
"""

# Sample cryptocurrency dataset
cryptos = [
    {
        "name": "Bitcoin",
        "price_trend": "rising",
        "energy_efficiency": "low",
        "project_viability": "high"
    },
    {
        "name": "Ethereum",
        "price_trend": "stable",
        "energy_efficiency": "medium",
        "project_viability": "high"
    },
    {
        "name": "Dogecoin",
        "price_trend": "falling",
        "energy_efficiency": "high",
        "project_viability": "low"
    }
]

# Rule-based logic to provide investment advice
def get_crypto_advice(crypto_name):
    for crypto in cryptos:
        if crypto["name"].lower() == crypto_name.lower():
            # Profitability rule
            if crypto["price_trend"] == "rising":
                profitability = "profitable"
            elif crypto["price_trend"] == "stable":
                profitability = "moderately profitable"
            else:
                profitability = "not currently profitable"

            # Sustainability rule
            if crypto["energy_efficiency"] == "low" or crypto["project_viability"] == "low":
                sustainability = "not sustainable"
            elif crypto["energy_efficiency"] == "medium":
                sustainability = "somewhat sustainable"
            else:
                sustainability = "sustainable"

            return f"{crypto_name} is {profitability} and {sustainability}. Consider this in your investment."
    return "Sorry, I don't have information on that cryptocurrency."

print("Hi! I'm your Crypto Advisor. Type the name of a cryptocurrency (e.g., Bitcoin, Ethereum, Dogecoin) to get advice.")
print("Type 'exit' to end the chat.")

while True:
    user_input = input("You: ")
    if user_input.lower() == "exit":
        print("Bot: Goodbye! Stay informed and invest wisely.")
        break
    else:
        advice = get_crypto_advice(user_input)
        print(f"Bot: {advice}")

"""# Task
Create a crypto rule-based chatbot by expanding the dataset, adding and refining rules, improving the user interface, and testing the updated chatbot.

## Expand the dataset

### Subtask:
Add more cryptocurrencies to the `cryptos` list.

**Reasoning**:
The subtask is to add more cryptocurrencies to the `cryptos` list. I will directly modify the existing `cryptos` list in the first code cell.
"""

# Sample cryptocurrency dataset
cryptos = [
    {
        "name": "Bitcoin",
        "price_trend": "rising",
        "energy_efficiency": "low",
        "project_viability": "high",
        "market_cap": "large",
        "volatility": "medium"
    },
    {
        "name": "Ethereum",
        "price_trend": "stable",
        "energy_efficiency": "medium",
        "project_viability": "high",
        "market_cap": "large",
        "volatility": "medium"
    },
    {
        "name": "Dogecoin",
        "price_trend": "falling",
        "energy_efficiency": "high",
        "project_viability": "low",
        "market_cap": "medium",
        "volatility": "high"
    },
    {
        "name": "Cardano",
        "price_trend": "rising",
        "energy_efficiency": "high",
        "project_viability": "high",
        "market_cap": "large",
        "volatility": "medium"
    },
    {
        "name": "Solana",
        "price_trend": "stable",
        "energy_efficiency": "high",
        "project_viability": "high",
        "market_cap": "large",
        "volatility": "high"
    },
    {
        "name": "XRP",
        "price_trend": "falling",
        "energy_efficiency": "medium",
        "project_viability": "medium",
        "market_cap": "large",
        "volatility": "medium"
    },
    {
        "name": "Polkadot",
        "price_trend": "stable",
        "energy_efficiency": "high",
        "project_viability": "high",
        "market_cap": "medium",
        "volatility": "medium"
    },
    {
        "name": "Litecoin",
        "price_trend": "stable",
        "energy_efficiency": "medium",
        "project_viability": "high",
        "market_cap": "medium",
        "volatility": "medium"
    }
]

# Rule-based logic to provide investment advice
def get_crypto_advice(crypto_name):
    for crypto in cryptos:
        if crypto["name"].lower() == crypto_name.lower():
            advice_parts = []

            # Profitability rule
            if crypto["price_trend"] == "rising":
                advice_parts.append("is currently showing a rising price trend, suggesting potential profitability.")
            elif crypto["price_trend"] == "stable":
                advice_parts.append("has a stable price trend, indicating moderate profitability.")
            else:
                advice_parts.append("is currently experiencing a falling price trend, making it not currently profitable.")

            # Sustainability rule
            if crypto["energy_efficiency"] == "low" or crypto["project_viability"] == "low":
                advice_parts.append("Regarding sustainability, it is currently not considered sustainable due to its energy efficiency or project viability.")
            elif crypto["energy_efficiency"] == "medium":
                advice_parts.append("In terms of sustainability, it is somewhat sustainable based on its energy efficiency.")
            else:
                advice_parts.append("From a sustainability perspective, it is considered sustainable.")

            # Market Cap rule
            if crypto["market_cap"] == "large":
                advice_parts.append("It has a large market capitalization, indicating a higher level of stability in the market.")
            elif crypto["market_cap"] == "medium":
                advice_parts.append("It has a medium market capitalization.")
            else:
                advice_parts.append("It has a small market capitalization, which could mean higher risk but also higher potential reward.")

            # Volatility rule
            if crypto["volatility"] == "high":
                advice_parts.append("It is highly volatile, so be prepared for significant price swings.")
            elif crypto["volatility"] == "medium":
                advice_parts.append("It has medium volatility.")
            else:
                advice_parts.append("It has low volatility, suggesting more stable price movements.")

            advice = f"{crypto_name} " + " ".join(advice_parts) + " Consider these factors in your investment decisions."
            disclaimer = " Crypto is riskyâ€”always do your own research!"
            return advice + disclaimer
    return "Sorry, I don't have information on that cryptocurrency."